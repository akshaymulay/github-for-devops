   2 python test.py- create python file
   3 git init->creat/setup local version control system on local machine
   4 git status->to check untracked files red
   5 git add test.py->to add file in stage green
   6 git status-
   7 git commit -m 'My first test file'->to commit or send the stage code to tracked
   8 git status
   9 history
  10 rm test.py->remove the file
  11 git restore test.py->restore it again
  git remote add 
  git remote -v->to check the url where we will push fetch the data
  git remote set-url origin https://key@github.com/username/repoName.git->to set url vai token
  git push origin master->to push the local master data to master repo in remote side git
  git fork->create a another copy of the current repository on github
  we can copy our as well as others repo in out github
  git clone->is the same thing to copy the repo but its get copied on our local machine

some new changes
yessssssssssssssssss

yes i want to learn git stash


//When you have uncommitted changes in your local file and there are also changes on the remote repository (Git) that affect the same file, you need to carefully manage these changes to avoid conflicts and data loss.

step 1-:temporarly remove the local changes by using git stash
step 2-:take a pull from remote master
step 3:git stash popup->to regain tempororly hidden changes


git branch
->to list/show the current branch

git branch 'branch name'
to create new branch

git switch 'branch'

to switch the branch

purpose of branches are so many developer work on same project
we divide the project tasks
each individual work on there tasks
so to avoid conflict on one record or place

each individual can create there own branch 